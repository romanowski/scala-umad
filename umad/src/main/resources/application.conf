umad: {
  shouldThrowExceptions: false
  shouldPrintStackTrace: true
  intervalMs: 60000
  verbose: false
  monitor: {
    enabled: true
    locks = "scala.reflect.internal.util.Parallel$.MODULE$.locks()",

    includes: [
      {
        class: "scala\\.(reflect|tools)\\..*"
        method: ".*"
      },
      {
        class: "scala\\.collection\\.mutable\\..*"
        method: ".*"
        onlyPublicMethods: true
        ifCalledFrom: "scala\\.(reflect|tools)\\..*"
      },
      {
        class: "scala\\.Array"
        method: ".*"
        onlyPublicMethods: true
        ifCalledFrom: "scala\\.(reflect|tools)\\..*"
      },
      {
        class: "java\\.util\\..*"
        method: ".*"
        onlyPublicMethods: true
        ifCalledFrom: "scala\\.(reflect|tools)\\..*"
      }
    ]
//(kwArray)|(chrs)|()|(op2code)|(typeHashtable)|(termHashtable).*
    excludes: [
      {
        class: ".*"
        method: "(.*lzycompute.*)|(.*kwArray)|(.*chrs)|(.*op2code)|(.*typeHashtable)|(.*termHashtable)|(.*code2op)|(.*typeSymbols)|(.*phaseWithId)|(.*phase_\\$eq)|(.*length)|(.*baseTypeIndex)|(.*compoundBaseTypeSeq.*)|(.*elems.*)"
      },
      {
        class: "java\\.util\\.concurrent\\.ConcurrentHashMap"
        method: ".*"
      },
      // Exclude constructors
      {
        class: "scala\\.Array$"
        method: "apply"
      },
      {
        class: "scala\\.Array"
        method: "Array"
      },
      {
        class: "scala\\.collection\\.mutable\\..*\\$"
        method: "apply"
      },
      {
        class: "scala\\.collection\\.mutable\\..*\\$"
        method: "empty"
      }
    ]
  }

  chaos: {
    enabled: false
    sleepTime: 100
    sleepThreshold: 100
    methodPercent: 10
    includes: [
      {
        class: ".*\\.Trees\\$Tree.*"
        method: ".*"
      },
      {
        class: ".*Parsers\\$Parser"
        method: ".*"
      }
    ]
    excludes: []
  }
}
